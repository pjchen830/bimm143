---
title: "Class08 Mini Project"
author: "Patricia Chen A16138722"
format: pdf
editor: visual
---

## Preparing the data

Answer Q1-Q15, Q14 is optional

```{r}

# Save your input data file into your Project directory

fna.data<- "WisconsinCancer.csv"


# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
head(wisc.df)

```

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]

```

Finally, setup a separate new vector called diagnosis that contains the data from the diagnosis column of the original dataset. We will store this as a factor (useful for plotting) and use this later to check our results.

```{r}
# Create diagnosis vector for later 
diagnosis <- as.numeric(wisc.df$diagnosis == "M")
diagnosis

```

## Exploratory data analysis

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```

> Answer: There are 569 observations in this dataset from the number of rows counted.

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis) # 0s = benigne, 1s = malignant
```

> Answer: There are 212 observations that have the malignant diagnosis, and 357 observations with benigne diagnosis.

> Q3. How many variables/features in the data are suffixed with \_mean?

```{r}

length(grep("_mean", colnames(wisc.data)))
```

> Answer: There are 10 features in the data that are suffixed with \_mean.

The functions dim(), nrow(), table(), length() and grep() may be useful for answering the first 3 questions above.

# 2.Principal Component Analysis

## Performing PCA

```{r}
# Check column means and standard deviations

colMeans(wisc.data)

apply(wisc.data,2,sd)

#Execute PCA with the prcomp() function on the wisc.data, scaling if appropriate, and assign the output model to wisc.pr.
```

```{r}
# Perform PCA on wisc.data by completing the following code
#Inspect a summary of the results with the summary() function.

wisc.pr <- prcomp(wisc.data, scale=TRUE)

# Look at summary of results
summary(wisc.pr)

```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
>
> Answer: 0.4427 proportion or 44.27% of the original variance is captured by the first principal components (PC1).

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
>
> Answer: From the row cumulative proportion, three principal components (PC3) are required to describe at least 70% of the original variance in the data, yielding a proportion of 0.72636.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
>
> Answer: From the row cumulative proportion, seven principal components (PC7) are required to describe at least 90% of the original variance in the data, yielding a proportion of 0.91010.

## Interpreting PCA results

Create a biplot of the wisc.pr using the biplot() function.

```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why? HINT: This is a hot mess of a plot and we will need to generate our own plots to make sense of this PCA result.
>
> Answer: The part of the plot that stands out is that it is a biplot that is plotted in two colors, with the column as red and rows as black. The trend of the plot is really difficult to understand and is very confusing, because we cannot clearly observe how the row and column datas compare, and could not identify the particular trend it is trying to demonstrate.

Lets generate a more standard scatter plot of each observation along principal components 1 and 2 and color the points by the diagnosis.

```{r}
# Scatter plot observations by components 1 and 2

plot(wisc.pr$x[,c(1,2)], col = (diagnosis+1), 
     xlab = "PC1", ylab = "PC2")

```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

> Answer: I noticed that the PC2 vs PC1 plot point scatters are more spread out compared to the PC3 vs PC1 plot. The PC3 vs PC1 plot data points are more concentrated on the bottom right corner of the graph axis and are more closely packed together.

```{r}

# Repeat for components 1 and 3

plot(wisc.pr$x[, c(1,3)], col = (diagnosis+1), 
     xlab = "PC1", ylab = "PC3")

```

Use ggplot2 package to make a fancy figure of the results

```{r}

# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col= df$diagnosis) + geom_point()
  

```

## Variance explained

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
     
     
```

```{r}

# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )

```

## Communicating PCA results

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr\$rotation\[,1\]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation[,1]
```

> Answer: The component of the loading vector for the feature concave.points_mean of the first principal component is -0.26085376.

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
summary(wisc.pr)
```

> Answer: By looking at the cumulative proportion, a minimum of five principal components (PC5) required to explain 80% of the variance of the data, which yields a proportion of 0.84734 of the variance.

# 3. Hierarchical clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

# Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to data.dist.

data.dist <- dist(data.scaled)


#Create a hierarchical clustering model using complete linkage. Manually specify the method argument to hclust() and assign the results to wisc.hclust.

wisc.hclust <- hclust(data.dist, method="complete")
```

## Results of hierarchical clustering

> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?
>
> Answer: The height that the clustering model have four clusters is estimated to be around a height of 19 or close to 20.

```{r}
plot(wisc.hclust)
abline(h=19, col="red", lty=2)
```

## Selecting number of clusters

```{r}
#Use cutree() to cut the tree so that it has 4 clusters. Assign the output to the variable wisc.hclust.clusters.

wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
wisc.hclust.clusters
```

```{r}
# Use the table() function to compare the cluster membership to the actual diagnoses

table(wisc.hclust.clusters, diagnosis)


```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=6)
table(wisc.hclust.clusters,diagnosis)

```

> Answer: A better number for cluster vs diagnoses match could be six clusters, where clusters 3, 4, and 5 demonstrates benign diagnosis, while clusters 1, 2, and 6 demonstrate malignant diagnosis.

## Using different methods

There are number of different "methods" we can use to combine points during the hierarchical clustering procedure. These include "single", "complete", "average" and (my favorite) "ward.D2".

> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}

wisc.hclust1 <- hclust(data.dist, method="ward.D2")
wisc.hclust1.clusters <- cutree(wisc.hclust1, k=2)
table(wisc.hclust1.clusters, diagnosis)

```

> Answer: My favorate method to use is the ward.D2 method, because this method produces two clear clusters of the diagnosis types, by cutting them into two groups. This allows for easier identification of which clusters is the benign and which is malignant diagnosis.

> Q14. Optional K-means clustering (Skipped)

# 5. Combining methods

## Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
plot(wisc.pr.hclust)
```

```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)

```

```{r}
plot(wisc.pr$x[,1:2], col=diagnosis+1)

```

```{r}
g <- as.factor(grps)
levels(g)
```

```{r}
#To match things up we can turn our groups into a factor and reorder the levels so cluster 2 comes first and thus gets the first color (black) and cluster 1 gets the second color (red).

g <- relevel(g,2)
levels(g)
```

```{r}
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]

wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")

#Cut this hierarchical clustering model into 2 clusters and assign the results to wisc.pr.hclust.clusters.

wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)

# Compare to actual diagnosis
table(wisc.pr.hclust.clusters, diagnosis)
                         
```

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?
>
> Answer: According to the table comparing actual diagnosis, the new model work very well in separating out the two diagnoses.
